package com.zklcsoftware.ganzhoubaobiao.web.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.zklcsoftware.basic.model.PageWrapper;
import com.zklcsoftware.common.dto.OperaResult;
import com.zklcsoftware.common.web.ExtBaseController;
import com.zklcsoftware.common.web.util.ConstantUtil;
import com.zklcsoftware.ganzhoubaobiao.domain.TDataCollect;
import com.zklcsoftware.ganzhoubaobiao.domain.TDictionary;
import com.zklcsoftware.ganzhoubaobiao.domain.TLog;
import com.zklcsoftware.ganzhoubaobiao.domain.TProcedure;
import com.zklcsoftware.ganzhoubaobiao.domain.TProcedureType;
import com.zklcsoftware.ganzhoubaobiao.domain.TRole;
import com.zklcsoftware.ganzhoubaobiao.domain.TTeacher;
import com.zklcsoftware.ganzhoubaobiao.domain.TTownSubmit;
import com.zklcsoftware.ganzhoubaobiao.domain.TUserRole;
import com.zklcsoftware.ganzhoubaobiao.dto.TProjectVueDTO;
import com.zklcsoftware.ganzhoubaobiao.dto.TTownSubmitDTO;
import com.zklcsoftware.ganzhoubaobiao.service.TDataCollectService;
import com.zklcsoftware.ganzhoubaobiao.service.TDictionaryService;
import com.zklcsoftware.ganzhoubaobiao.service.TLogService;
import com.zklcsoftware.ganzhoubaobiao.service.TProcedureService;
import com.zklcsoftware.ganzhoubaobiao.service.TProcedureTypeService;
import com.zklcsoftware.ganzhoubaobiao.service.TRoleService;
import com.zklcsoftware.ganzhoubaobiao.service.TTeacherService;
import com.zklcsoftware.ganzhoubaobiao.service.TTownSubmitService;
import com.zklcsoftware.ganzhoubaobiao.service.TUserRoleService;

/**
 * 项目设置控制层
 * @author duzhihui 2019年3月18日14:00:00
 *
 */
@Slf4j
@Controller
@RequestMapping(path={"","/api"})
public class ProjectSomeSettingsController extends ExtBaseController{

	@Value("${uploadfiledir.uploadPhotoFile}")
	public String uploadPhotoFile;// 上传文件路径
	
	@Value("${uploadfiledir.uploadFilePath}")
	public String uploadFilePath;// 上传文件地址
	
	@Autowired
	private TLogService tLogService;
	
	@Autowired
	private TDataCollectService tDataCollectService;
	
	@Autowired
	private TTownSubmitService tTownSubmitService;
	
	@Autowired
	private TRoleService tRoleService;
	
	@Autowired
	private TUserRoleService tUserRoleService;
	
	@Autowired
	private TTeacherService tTeacherService;
	
	@Autowired
	private TProcedureService tProcedureService;
	
	@Autowired
	private TDictionaryService tDictionaryService;
	
	@Autowired
	private TProcedureTypeService tProcedureTypeService;
	
	@ApiOperation(value = "市局创建项目", notes = "市局创建项目")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "project", value = "项目对象", required = false, dataType = "Object", paramType = "query"),
	@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/createProject", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult createProject(OperaResult result, TProjectVueDTO project) {
		if(null == project) {
			project = new TProjectVueDTO();
		}
		if(null == project.getId()) { //新增操作
			// 选择程序流程 
			
			//新增工程阶段  阶段中新增进度  进度可修改、排序、删除  
			
			//进度对应着程序流程的一项或多项
			
			//操作区县范围  全删了重建
		} else { //更新
				
		}
	    return result;
	}
	
	@ApiOperation(value = "查询程序流程", notes = "查询程序流程")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "procedureId", value = "程序流程id", required = false, dataType = "Integer", paramType = "query"),
	@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/queryProcedure", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryProcedure(OperaResult result, Integer procedureId) {
		List<TProcedure> procedureList = tProcedureService.findByTProcedureTypeId(procedureId);
		for (TProcedure tProcedure : procedureList) {
			//组装树
		}
		return result;
	}
	
	@ApiOperation(value = "查询区县", notes = "查询区县范围")
	@ApiImplicitParams({
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/queryTownInfo", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryTownInfo(OperaResult result) {
		List<TDictionary> tDictionaryList = tDictionaryService.findByPcode(ConstantUtil.PCODE_100);
		result.getContent().put("tDictionaryList", tDictionaryList);
		return result;
	}
	
	@ApiOperation(value = "查询程序流程类型列表", notes = "查询程序流程类型列表")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "name", value = "程序流程类型名称", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/queryProcedureList", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryProcedureList(OperaResult result, String name, @PageableDefault Pageable pageable) {
		Map<String, Object> params = new HashMap<>();
		params.put("name", name);
		Page<TProcedureType> page = tProcedureTypeService.queryProcedureList(params, pageable);
		result.getContent().put("page", new PageWrapper<TProcedureType>(page));
		return result;
	}
	
	@ApiOperation(value = "删除程序流程类型", notes = "删除程序流程类型")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "程序流程类型主键id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/deleteProcedureById", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult deleteProcedureById(OperaResult result, Integer id) {
		try {
			tProcedureTypeService.delete(id);
			List<TProcedure> procedureList = tProcedureService.findByTProcedureTypeId(id);
			for (TProcedure tProcedure : procedureList) {
				tProcedureService.delete(tProcedure);
			}
		} catch (Exception e) {
			e.printStackTrace();
			result.setResultCode(ConstantUtil.OPT_RESULT_CODE_FAIL);
			result.setResultDesc("操作失败，请联系管理员！");
		}
		return result;
	}
	
	@ApiOperation(value = "创建程序流程", notes = "创建程序流程")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "procedure", value = "程序流程对象", required = false, dataType = "Object", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/web/createProcedure", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult createProcedure(OperaResult result) {
		//TODO
		return result;
	}
	
	//TODO 导入创建  导出文件
	
	@ApiOperation(value = "帐号权限管理查询所有权限", notes = "帐号权限管理查询所有权限")
	@ApiImplicitParams({
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryAllAuthority", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryAllAuthority(OperaResult result) {
		List<TRole> roleList = tRoleService.findAll();
		Collections.sort(roleList, new Comparator<TRole>(){
			/**
             * int compare(TRole p1, TRole p2) 返回一个基本类型的整型，
             * 返回负数表示：p1小于p2，
             * 返回0 表示：p1和p2相等，
             * 返回正数表示：p1大于p2
             */
			@Override
			public int compare(TRole o1, TRole o2) {
				if(o1.getId() > o2.getId()) {
					return -1;
				}
				if(o1.getId() < o2.getId()) {
					return 1;
				}
				return 0;
			}
			
		});
		result.getContent().put("roleList", roleList);
		return result;
	}
	
	@ApiOperation(value = "帐号权限管理查询所属区县", notes = "帐号权限管理查询所属区县")
	@ApiImplicitParams({
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryAllTown", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryAllTown(OperaResult result) {
		List<TDictionary> townList = tDictionaryService.findByPcode(ConstantUtil.PCODE_100);
		result.getContent().put("townList", townList);
		return result;
	}
	
	@ApiOperation(value = "帐号权限管理", notes = "帐号权限管理")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "tUserRole", value = "用户权限对象", required = false, dataType = "Object", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/saveAccountAuthority", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult saveAccountAuthority(OperaResult result, TUserRole tUserRole) {
		tUserRoleService.save(tUserRole);
		return result;
	}
	
	@ApiOperation(value = "帐号权限列表", notes = "帐号权限列表")
	@ApiImplicitParams({
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryAccountAuthorityList", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryAccountAuthorityList(OperaResult result) {
		List<TUserRole> userRoleList = tUserRoleService.findAll();
		for (TUserRole tUserRole : userRoleList) {
			TTeacher tTeacher = tTeacherService.findByGlobalId(tUserRole.getUserId());
			tUserRole.setUserName(tTeacher.getName());
		}
		result.getContent().put("userRoleList", userRoleList);
		return result;
	}
	
	@ApiOperation(value = "删除帐号权限管理", notes = "删除帐号权限管理")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "用户权限id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/deleteAccountAuthority", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult deleteAccountAuthority(OperaResult result, Integer id) {
		tUserRoleService.delete(id);
		return result;
	}
	
	@ApiOperation(value = "审核权限设置", notes = "审核权限设置")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "用户权限id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(name = "ifCheck", value = "是否需要审核", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/auditAuthoritySet", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult auditAuthoritySet(OperaResult result, Integer id, Integer ifCheck) {
		TRole tRole = tRoleService.findById(id);
		tRole.setIfCheck(ifCheck);
		Integer status = null;
		if(ifCheck == ConstantUtil.IF_CHECK_1) {
			status = ConstantUtil.IF_CHECK_1;
		} else {
			status = ConstantUtil.IF_CHECK_0;
		}
		tRole.setStatus(status);
		tRoleService.save(tRole);
		return result;
	}
	/////*************************数据收集功能***************************************/
	
	@ApiOperation(value = "数据收集查询列表", notes = "数据收集查询列表")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "title", value = "标题", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(name = "orderBy", value = "排序", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryDataCollectList", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryDataCollectList(OperaResult result, String title, String orderBy, @PageableDefault Pageable pageable) {
		Map<String, Object> params = new HashMap<>();
		params.put("title", title);
		params.put("orderBy", orderBy);
		Page<TDataCollect> page = tDataCollectService.findDataCollectList(params, pageable);
		for (TDataCollect tDataCollect : page.getContent()) {
			// 查询已提交的区县
			List<TTownSubmit> tTownSubmitList = tTownSubmitService.findByCollectIdAndIsSubmit(tDataCollect.getId(), ConstantUtil.IS_SUBMIT_1);
			// 查询总的区县
			List<TTownSubmit> sumSubmitList = tTownSubmitService.findByCollectId(tDataCollect.getId());
			tDataCollect.setReferNumber(CollectionUtils.isEmpty(tTownSubmitList) ? 0 : tTownSubmitList.size());
			tDataCollect.setSumNumber(CollectionUtils.isEmpty(sumSubmitList) ? 0 : sumSubmitList.size());
		}
		result.getContent().put("page", new PageWrapper<TDataCollect>(page));
		return result;
	}
	
	@ApiOperation(value = "数据收集-根据id查询", notes = "数据收集-根据id查询")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/findDataCollectById", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult findDataCollectById(OperaResult result, Integer id) {
		TDataCollect tDataCollect = tDataCollectService.findById(id);
		result.getContent().put("tDataCollect", tDataCollect);
		return result;
	}
	
	@ApiOperation(value = "数据收集-删除", notes = "数据收集-删除")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/deleteDataCollect", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult deleteDataCollect(OperaResult result, Integer id) {
		tDataCollectService.delete(id);
		return result;
	}
	
	@ApiOperation(value = "数据收集-新增/修改", notes = "数据收集-新增/修改")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "tDataCollect", value = "tDataCollect", required = false, dataType = "Object", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/saveDataCollect", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult saveDataCollect(OperaResult result, TDataCollect tDataCollect) {
		TDataCollect newDataCollect = tDataCollectService.save(tDataCollect);
		List<TTownSubmit> townSubmitList = new ArrayList<>();
		//给所有区县接收人发
		List<TDictionary> townList = tDictionaryService.findByPcode(ConstantUtil.PCODE_100);
		for (TDictionary town : townList) {
			TTownSubmit tTownSubmit = new TTownSubmit();
			tTownSubmit.setIsSubmit(ConstantUtil.IS_SUBMIT_0);
			tTownSubmit.setTownId(town.getCode());
			tTownSubmit.setCollectId(newDataCollect.getId());
			townSubmitList.add(tTownSubmit);
		}
		tTownSubmitService.save(townSubmitList);
		return result;
	}
	
	@ApiOperation(value = "数据收集-查看提交情况", notes = "数据收集-查看提交情况")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "params", value = "params", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(name = "status", value = "提交状态", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(name = "orderBy", value = "提交日期排序", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/viewSubmitCondition", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult viewSubmitCondition(OperaResult result, String params, Integer status, Integer orderBy, @PageableDefault Pageable pageable) {
		Map<String, Object> map = new HashMap<>();
		map.put("params", params);
		map.put("status", status);
		map.put("orderBy", orderBy);
		Page<TTownSubmit> page = tTownSubmitService.viewSubmitCondition(map, pageable);
		result.getContent().put("page", new PageWrapper<TTownSubmit>(page));
		return result;
	}
	
	@ApiOperation(value = "区县校建办数据提交-查询列表", notes = "区县校建办数据提交-查询列表")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "title", value = "标题", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(name = "orderByRelease", value = "发布日期排序", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(name = "orderBy", value = "提交日期排序", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/querySubmitDataList", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult querySubmitDataList(OperaResult result, String title, Integer orderByRelease, Integer orderBy, @PageableDefault Pageable pageable) {
		Map<String, Object> map = new HashMap<>();
		map.put("title", title);
		map.put("orderByRelease", orderByRelease); //发布日期排序
		map.put("orderBy", orderBy); //提交日期排序
		map.put("userId", getUserGuid());
		Page<TTownSubmitDTO> page = tTownSubmitService.querySubmitDataList(map, pageable);
		result.getContent().put("page", new PageWrapper<TTownSubmitDTO>(page));
		return result;
	}
	
	// TODO 市局科室上传文件 预览  区县校建办填写文件  APP推送 短信通知
	
	@ApiOperation(value = "市局科室上传方法", notes = "市局科室上传方法")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "access_token") })
	@RequestMapping(value = "/admin/commonUpload", method = { RequestMethod.POST })
	@ResponseBody
	public OperaResult commonUpload(OperaResult result, MultipartFile file) throws IOException {

		String root = uploadPhotoFile;
		String filename = file.getOriginalFilename();
		ArrayList<String> types = new ArrayList<String>();// 设置上传文件类型
		types.add("XLS");
		types.add("XLSX");
		String fileType = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
		if (!types.contains(fileType.toUpperCase())) {
			result.getContent().put("fileInfo", "nottype");
			return result;
		}
		String tempname = new Date().getTime() + "." + fileType;
		// 基于myFile创建一个文件输入流
		InputStream is = file.getInputStream();
		if (is.available() > 1 * 1024 * (30 * 1024)) {
			if (is != null)
				is.close();
			result.getContent().put("fileInfo", "toobig");
			return result;
		}
		/*
		 * BufferedImage sourceImg =ImageIO.read(file.getInputStream());
		 * if(sourceImg.getWidth() < 512){ result.getContent().put("fileInfo",
		 * "nosize"); return result; }
		 */
		File toFile = new File(root, tempname);
		if (!toFile.getParentFile().exists()) {
			toFile.getParentFile().mkdirs();
		}
		// 创建一个输出流
		OutputStream os = new FileOutputStream(toFile);
		// 设置缓存
		byte[] buffer = new byte[1024];
		int length = 0;
		while ((length = is.read(buffer)) != -1) {
			os.write(buffer, 0, length);
		}
		// 关闭输入流
		is.close();
		os.close();
		String url = uploadFilePath + File.separator + tempname;
		result.getContent().put("fileInfo", url);
		return result;
	}
	
	/////*************************管理员功能***************************************/
	
	@ApiOperation(value = "查询科室用户树", notes = "查询科室用户树")
	@ApiImplicitParams({
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryAccountTree", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryAccountTree(OperaResult result) {
		
		return result;
	}
	
	@ApiOperation(value = "查询市局科室账号列表", notes = "查询市局科室账号列表")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "userId", value = "用户id", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/queryAccountList", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult queryAccountList(OperaResult result) {
		List<TUserRole> userRoleList = tUserRoleService.findByRoleId(ConstantUtil.CITY_BUREAU);
		for (TUserRole tUserRole : userRoleList) {
			TTeacher tTeacher = tTeacherService.findByGlobalId(tUserRole.getUserId());
			tUserRole.setUserName(tTeacher.getName());
		}
		result.getContent().put("userRoleList", userRoleList);
		return result;
	}
	
	@ApiOperation(value = "市局科室账号分配", notes = "市局科室账号分配")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "userId", value = "用户id", required = false, dataType = "String", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/accountAssignment", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult accountAssignment(OperaResult result, String userId) {
		TTeacher tTeacher = tTeacherService.findByGlobalId(userId);
		TUserRole tUserRole = new TUserRole();
		tUserRole.setUserId(userId);
		tUserRole.setRoleId(ConstantUtil.CITY_BUREAU);
		tUserRoleService.save(tUserRole);
		
		TLog log = new TLog();
		log.setUserName(getUName());
		log.setUserId(getUserGuid());
		log.setCreateTime(new Date());
		log.setContent("创建账号成功" + "(" + tTeacher.getName() + ")");
		log.setType(ConstantUtil.CREATE_ACCOUNT);
		tLogService.save(log);
		return result;
	}
	
	@ApiOperation(value = "删除市局科室账号分配", notes = "删除市局科室账号分配")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "id", value = "用户权限表主键id", required = false, dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(paramType = "query", name = "access_token")
	})
	@RequestMapping(value = "/admin/deleteAccountAssignment", method = {RequestMethod.POST})
	@ResponseBody
	public OperaResult deleteAccountAssignment(OperaResult result, Integer id) {
		try {
			TUserRole tUserRole = tUserRoleService.findById(id);
			String userId = tUserRole.getUserId();
			TTeacher tTeacher = tTeacherService.findByGlobalId(userId);
			TLog log = new TLog();
			log.setUserName(getUName());
			log.setUserId(getUserGuid());
			log.setCreateTime(new Date());
			log.setContent("删除账号成功" + "(" + tTeacher.getName() + ")");
			log.setType(ConstantUtil.DELETE_ACCOUNT);
			tLogService.save(log);
		} catch (Exception e) {
			log.equals("delete shijukeshi crash");
			e.printStackTrace();
		}
		tUserRoleService.delete(id);
		return result;
	}
	
}
