package com.zklcsoftware.ganzhoubaobiao.web.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zklcsoftware.basic.util.DateUtil;
import com.zklcsoftware.common.dto.OperaResult;
import com.zklcsoftware.common.web.ExtBaseController;
import com.zklcsoftware.ganzhoubaobiao.domain.TProject;
import com.zklcsoftware.ganzhoubaobiao.domain.TProjectTownSchedule;
import com.zklcsoftware.ganzhoubaobiao.dto.DataDTO;
import com.zklcsoftware.ganzhoubaobiao.dto.TProStageSchedDTO;
import com.zklcsoftware.ganzhoubaobiao.dto.TProjectSchoolDTO;
import com.zklcsoftware.ganzhoubaobiao.dto.TProjectVueDTO;
import com.zklcsoftware.ganzhoubaobiao.service.TProjectService;
import com.zklcsoftware.ganzhoubaobiao.service.TProjectTownScheduleService;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * 
* @ClassName: TProjectController  
* @Description: 项目详情  
* @author lipanlong  
* @date 2019年3月20日  
*
 */
@Slf4j
@Controller
@RequestMapping(path={"","/api"})
public class TProjectController extends ExtBaseController {

    @Autowired
    private TProjectService tProjectService;
    @Autowired
    private TProjectTownScheduleService tProjectTownScheduleService;
    
    /**
     * 
    * @author lipanlong
    * @Title: deleteColumn  
    * @Description: TODO(这里用一句话描述这个方法的作用)  
    * @param @param result
    * @param @return    参数  
    * @return OperaResult    返回类型  
    * @throws
     */
    @ApiOperation(value = "市局科室查询项目列表", notes = "市局科室查询项目列表")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/queryProjectList", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult queryProjectList(OperaResult result,@PageableDefault Pageable pageable,
            String year, String status, String projectName ) {
        log.info("查询市局科室查询项目列表");
        HashMap<String, Object> params = new HashMap<>();
        params.put("year", year);
        params.put("status", status);
        params.put("projectName", projectName);
        
        Page<TProjectVueDTO> page = tProjectService.findByParams(params, pageable);
        List<TProjectVueDTO> content = page.getContent();
        for (int i = 0; i < content.size(); i++) {
            TProjectVueDTO tProjectVueDTO = content.get(i);
            if(tProjectVueDTO.getStatus()!=null && tProjectVueDTO.getStatus()==4){
                tProjectVueDTO.setSwitchValue(true);
            }else{
                tProjectVueDTO.setSwitchValue(false);
            }
        }
        
        result.getContent().put("page", page);
        
        return result;
    }
    
    @ApiOperation(value = "更新项目申报截止时间", notes = "更新项目申报截止时间")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/changeProjectTime", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult changeProjectTime(OperaResult result, Integer projectId, Long finishTime) {
        log.info("更新项目申报截止时间");
        
        TProject project = tProjectService.findById(projectId);
        project.setFinishTime(new Date(finishTime));
        tProjectService.save(project);
        
        return result;
    }
    
    @ApiOperation(value = "查询区县项目下学校列表", notes = "查询区县项目下学校列表")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/querySchoolList", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult querySchoolList(OperaResult result,@PageableDefault Pageable pageable, 
            Integer projectId, String townId, String year, String schoolName, Integer stage, String shenbao ) {
        log.info("查询区县项目下学校列表");
        
        HashMap<String, Object> params = new HashMap<>();
        params.put("projectId", projectId);
        params.put("townId", townId);
        params.put("schoolName", schoolName);
        params.put("stage", stage);
        
        if(!shenbao.equals("1")&&shenbao!=null){
            params.put("shenbao", "");
        }else{
            params.put("shenbao", shenbao);
        }
        if(year.equals("")||year==null){
            String yearMonth = new SimpleDateFormat("yyyy-MM").format(new Date());
            params.put("year", yearMonth);
        }else{
            params.put("year", year);
        }
        
        Page<TProjectSchoolDTO> page = tProjectService.findProjectSchoolList(params,pageable);
        
        result.getContent().put("page", page);
        
        return result;
    }
    
    @ApiOperation(value = "查询项目总体情况", notes = "查询项目总体情况")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/queryTownProject", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult queryTownProject(OperaResult result, Integer projectId, String townId) {
        log.info("查询项目总体情况");
        
        HashMap<String, Object> params = new HashMap<>();
        params.put("projectId", projectId);
        params.put("townId", townId);
        
        TProjectVueDTO project = tProjectService.findTotalProjectDetail(params);
        
        result.getContent().put("project", project);
        
        return result;
    }
    
    
    
    
    
    
    
    @ApiOperation(value = "区县保存项目时间", notes = "区县保存项目时间")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/saveTownProjectTime", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult saveTownProjectTime(OperaResult result, String projectTime, String townId) {
        log.info("区县保存项目时间");
        
        JSONArray jsonArray = JSONArray.fromObject(projectTime);
        for (int i = 0; i < jsonArray.size(); i++) {
            JSONObject object = jsonArray.getJSONObject(i);
            JSONArray array = object.getJSONArray("dateTime");
            if(array!=null){
                Integer scheduleId = object.getInt("scheduleId");
                Integer projectId = object.getInt("projectId");
                String startTime = (String)array.get(0);
                String endTime = (String)array.get(1);
                
                TProjectTownSchedule townSchedule = tProjectTownScheduleService.findByTownIdAndScheduleIdAndProjectId(townId,scheduleId,projectId);
                if(townSchedule == null){
                    townSchedule = new TProjectTownSchedule();
                    townSchedule.setTownId(townId);
                    townSchedule.setScheduleId(scheduleId);
                    townSchedule.setProjectId(projectId);
                }
                townSchedule.setStartTime(DateUtil.parseDate(startTime, 3));
                townSchedule.setFinishTime(DateUtil.parseDate(endTime, 3));
                tProjectTownScheduleService.save(townSchedule);
                
            }
        }
        
        return result;
    }
    
    
    @ApiOperation(value = "查询项目下的阶段和进度", notes = "查询项目下的阶段和进度")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/queryProjectSchedule", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult queryProjectSchedule(OperaResult result, String projectId, String townId, String schoolId) {
        log.info("查询项目下的阶段和进度");
        HashMap<String, Object> params = new HashMap<>();
        params.put("projectId", projectId);
        params.put("townId", townId);
        params.put("schoolId", schoolId);
        
        List<TProStageSchedDTO> list = tProjectService.findProjectSchedule(params);
        for (int i = 0; i < list.size(); i++) {
            TProStageSchedDTO tProStageSchedDTO = list.get(i);
            if(tProStageSchedDTO.getStartTime()!=null){
                String[] date = new String[2];
                date[0] = DateUtil.toDateStr(tProStageSchedDTO.getStartTime(), 3);
                date[1] = DateUtil.toDateStr(tProStageSchedDTO.getFinishTime(), 3);
                tProStageSchedDTO.setDateTime(date);
            }
        }
        result.getContent().put("list", list);
        
        return result;
    }
    
    @SuppressWarnings("null")
    @ApiOperation(value = "查询项目时间", notes = "查询项目时间")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "access_token"),
    })
    @RequestMapping(value = "/web/queryProjectYears", method = {RequestMethod.POST})
    @ResponseBody
    public OperaResult queryProjectYears(OperaResult result) {
        log.info("查询项目时间");
        List<DataDTO> list = new ArrayList<DataDTO>();
        
        list = tProjectService.findProjectYears();
        
        if(list==null){
            DataDTO data = new DataDTO();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy");        
            Date date = new Date();
            String year = sdf.format(date);
            data.setName(year);
            data.setId(year);
            
            list.add(data);
        }
        
        result.getContent().put("list", list);
        return result;
    }
    
    /**
     * form表单提交 Date类型数据绑定
     * <功能详细描述>
     * @param binder
     * @see [类、类#方法、类#成员]
     */
    @InitBinder  
    public void initBinder(WebDataBinder binder) {  
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        dateFormat.setLenient(false);  
        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));  
    }

}
